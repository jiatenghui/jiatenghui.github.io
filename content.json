{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2017-06-11T07:13:06.000Z","updated":"2019-07-12T05:29:19.116Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-07-16T09:32:49.000Z","updated":"2019-07-16T09:46:32.485Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"tjNPM内部镜像和h5公共库","slug":"tjNPM私有镜像和h5公共库","date":"2019-07-18T06:40:27.000Z","updated":"2019-07-18T07:20:46.934Z","comments":true,"path":"2019/07/18/tjNPM私有镜像和h5公共库/","link":"","permalink":"http://yoursite.com/2019/07/18/tjNPM私有镜像和h5公共库/","excerpt":"请输入密码进行查看","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","categories":[],"tags":[{"name":"tj","slug":"tj","permalink":"http://yoursite.com/tags/tj/"}]},{"title":"tj前端项目部署流程","slug":"tj前端项目开发部署流程","date":"2019-07-15T10:54:45.000Z","updated":"2019-07-16T12:59:48.151Z","comments":true,"path":"2019/07/15/tj前端项目开发部署流程/","link":"","permalink":"http://yoursite.com/2019/07/15/tj前端项目开发部署流程/","excerpt":"请输入密码进行查看","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","categories":[],"tags":[{"name":"tj","slug":"tj","permalink":"http://yoursite.com/tags/tj/"}]},{"title":"Git学习","slug":"Git学习【持续更新】","date":"2019-07-11T09:48:24.000Z","updated":"2019-07-18T06:41:35.736Z","comments":true,"path":"2019/07/11/Git学习【持续更新】/","link":"","permalink":"http://yoursite.com/2019/07/11/Git学习【持续更新】/","excerpt":"","text":"什么是Git？ Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理，而对于大家熟知的Github来说，它是一个用Git做版本控制的项目托管平台如图： 在这里我把我学习Git过程中的知识总结出来，供大家参考 要想使用Git，首先我们需要来安装Git，这里我把链接放在这，有兴趣的兄dei可以来下载安装链接 密码：ue9y 下载好之后，我们就开始正式了解Git 因为在建博客时也用到了Git，因此我主要说明一下Git如何进行远程连接和下载提交工程要使用Git，我们首先要告诉Git我们是谁一般填写的都是Github的用户名和注册邮箱 1git config --global user.name &apos;你的名称&apos; 1git config --global user.email &apos;你的邮箱&apos; 初始化在任意一个地方新建一个文件，然后在文件中打开git，输入初始化命令 1git init 即初始化完成 提交过程首先我们需要先查看当前文件的状态 1git status 它会显示出当前我们所在的分支，比如“on branch master”表示我们现在处在master这个分支上，即主分支 当我们在文件中新建文件之后，再次运行“git status”时，结果会以红色字体出现新建文件名，即git未跟踪文件，现在我们需要将未跟踪文件添加进来，输入 1git add . #表示添加所有修改文件 或1git add 文件名 #表示添加某一文件 再次运行“git status”，会显示绿色字体，表示该文件将要被提交，这时需要确认提交 1git commit -m &apos;提交信息&apos; #提交信息主要写你提交了什么文件 提交完成 注：一旦修改了跟踪文件的内容，就要重新进行提交 创建分支先查看所有分支 1git branch 分支名称左边有“*”的默认为当前分支 创建分支 1git branch 分支名 既然分支创建好了，如何切换分支呢？我们需要输入命令 1git checkout 分支名 下载版本库1git clone 远程版本库地址 #默认名称为版本库名称，可以在后面加上自定义的名称 下载完成后，就可以在本地对版本库进行修改 提交版本库当修改完成之后，在git里面输入1git push origin master 完成提交 但是远程版本库并不知道你已经更新了状态，这个时候我们需要输入 1git fetch 提示已经提取到更新，然后查看状态 1git status 查看显示远程上已经有了更新，然后我们需要进行 1git merge origin/master 这个时候当前分支就与“master”分支保持一致了 以上 2017-06-12 分割线 在主分支master上创建子分支（如t1和t2）时，需要注意，创建t1成功后，需要切换回master分支再创建t2分支，这样t1和t2才会是平级的分支。 在工作中使用git进行代码管理时，需要注意公司采用图形化管理还是命令行管理，使用图形化管理时需要注意当前代码需改完成之后，需要进入gitlab下的项目中找到要提交的分支进行merge；命令行合并代码的时候，子分支进行到 git commit -m “xxx” 时就可以切换分支进行合并，然后在主分支进行远程提交即可。 ==另注：使用git一定要小心== 更新于 2019-07-11","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"tj首页到下单的流程和逻辑【持续更新】","slug":"tj首页到下单的流程和逻辑","date":"2019-07-11T08:26:23.000Z","updated":"2019-07-17T12:28:03.153Z","comments":true,"path":"2019/07/11/tj首页到下单的流程和逻辑/","link":"","permalink":"http://yoursite.com/2019/07/11/tj首页到下单的流程和逻辑/","excerpt":"请输入密码进行查看","text":"Please enter the password to read the blog. Incorrect Password! No content to display! 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","categories":[],"tags":[{"name":"tj","slug":"tj","permalink":"http://yoursite.com/tags/tj/"}]},{"title":"vue问题总结【更新】","slug":"vue问题总结【持续更新】","date":"2018-08-22T13:06:55.000Z","updated":"2019-07-16T09:57:16.582Z","comments":true,"path":"2018/08/22/vue问题总结【持续更新】/","link":"","permalink":"http://yoursite.com/2018/08/22/vue问题总结【持续更新】/","excerpt":"","text":"1、今天在公司修改样式的时候发现引入Element-UI的tooltip组件之后，想对tootip的样式进行自定义修改，结果发现无论怎么设置选择器的优先级，都渲染不到页面上，后来经过一系列的尝试之后发现是由于给style设置scoped造成的，本身设置scoped是为了防止全局样式冲突，结果没想到会造成自定义的样式渲染不上，后来经过思考测试，其实是可以将组件内修改tooltp的样式放到全局css中，不过需要给对应的元素设置类型，比如tooltip可以通过popper-class=”tooltip”设置类名，然后给这个类名添加样式。 2、在进行vue页面编写时经常会用到数据绑定，在渲染页面的时候其实会出现页面闪烁会看到变量的问题，比如通过&lt;p&gt;&lt;p&gt;进行数据绑定，页面刷新时可能会看到，这对于用户体验来说是很差的，因此我们可以使用v-clock来解决这个问题，基本上我们只需要把它添加到el挂载的标签就可以，一般来说就是最外层的div，如&lt;div class=”#app” v-clock&gt; 在某些情况下v-clock并不起作用 ①、挂载v-clock的元素的display属性被更高层级的覆盖掉了，如!important属性，这就需要我们提高层级 ②、当样式放到@import引入的css文件中时v-clock是不起作用的，可以用link引入样式或者写入内联样式。 3、在搭建个人博客时我曾经换过页面标题旁边的图标，因此在利用vue编写个人项目时也考虑过这个问题，它的实现思路和博客其实差不多，只需要在最外层index.html的head标签里面加上&lt;link rel=”shortcut icon” type=”image/x-icon” href=”static/favicon.ico”&gt;，个人建议图标和logo之类的图片放在static文件夹中比较好。 to be continue…","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"利用hover控制其他元素样式","slug":"利用hover控制其他元素样式","date":"2018-08-21T13:05:29.000Z","updated":"2019-07-16T09:56:30.411Z","comments":true,"path":"2018/08/21/利用hover控制其他元素样式/","link":"","permalink":"http://yoursite.com/2018/08/21/利用hover控制其他元素样式/","excerpt":"","text":"之前在项目中有一个需求是鼠标移入元素上时该元素改变样式的同时另外元素样式也要改变，刚开始想利用js来实现，不过有点麻烦，之后发现可以通过css直接来实现这个功能，本着人无我有，人有我优的原则，在这里记录一下具体过程。 首先我经过尝试以及网上查找之后，发现利用hover来实现这个功能是有一定局限性的，如果你要改变其他元素的样式，那么它们必须是相邻同级元素或者是同一父元素的子元素，不然效果是出不来的（呜~） 相邻同级元素HTML &lt;div class=\"div1\"&gt; &lt;div class=\"son1\"&gt;son1 &lt;/div&gt; &lt;div class=\"son2\"&gt;son2 &lt;/div&gt; &lt;/div&gt; CSS .son1 , .son2{ width:100px; height:100px; border:1px solid #000; } .son1:hover + .son2{ background:#000; } 鼠标移入son1元素，son2元素背景色变黑 父级元素HTML &lt;div class=\"div1\"&gt; &lt;div class=\"son\"&gt;son1 &lt;/div&gt; &lt;/div&gt; CSS .div1{ width:200px; height:200px; border:1px solid #000; } .son{ margin:0 auto; width:100px; height:100px; border:1px solid #000; } .div1:hover .son{ background:#000; } 鼠标移入父级.div1元素，子元素son背景变黑","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"Web安全攻击方式","slug":"Web安全攻击方式","date":"2018-05-18T15:56:27.000Z","updated":"2019-07-16T09:57:25.243Z","comments":true,"path":"2018/05/18/Web安全攻击方式/","link":"","permalink":"http://yoursite.com/2018/05/18/Web安全攻击方式/","excerpt":"","text":"xssxss是跨站脚本攻击，指攻击者在网页中嵌入客户端脚本，当用户浏览次页面时，脚本就会在用户浏览器上执行，从而达到攻击目的 比如我们下载有这么一个代码 &lt;input type=”text” name=”address” value=”valuefrom”&gt; valuefrom是来自用户的输入，如果用户不是输入valuefrom而是输入”/&gt;&lt;script&gt;alert(document.cookie)&gt;/script&gt;&lt;!-,即变成 &lt;input type=”text” name=”address” value=””/&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&lt;!-“&gt; 嵌入的javascript代码将会被执行 xss漏洞修复原则：不要相信用户输入的数据 *注意：攻击代码不一定在&lt;script&gt;&lt;script&gt;标签里 将重要的cookie标记为http only，这样js的document.cookie语句就无法获取cookie 只允许用户输入我们规定的数据，比如年龄只允许输入数字 对数据进行html Encode处理 过滤或移除特殊的html标签，例如&lt;script&gt;,&lt;iframe&gt; 过滤掉js事件的标签，比如onclick,onfocus csrfcsrf是跨站请求伪造，指攻击者盗用了你的身份，以你的名义发送恶意请求，csrf能够以你名义发送邮件，发消息……会造成个人隐私泄露以及财产安全等问题 要完成一次csrf攻击，受害者必须依次完成两个步骤： 登录受信任网站A，并在本地生成cookie 在不登出A的情况下，访问危险网站B 看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生： 1.你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。 2.你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了……） 3.所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。 csrf防御 1.服务端进行csrf防御 服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。 (1).Cookie Hashing(所有表单都包含同一个伪随机值) (2).验证码 (3).One-Time Tokens(不同的表单包含一个不同的伪随机值) 目前防御 CSRF 攻击主要有三种策略： ①验证 HTTP Referer 字段； ②在请求地址中添加 token 并验证； ③在 HTTP 头中自定义属性并验证。","categories":[],"tags":[{"name":"web安全","slug":"web安全","permalink":"http://yoursite.com/tags/web安全/"}]},{"title":"安装mongodb遇到的坑","slug":"安装mongodb遇到的坑","date":"2018-05-11T15:55:45.000Z","updated":"2019-07-16T09:56:23.805Z","comments":true,"path":"2018/05/11/安装mongodb遇到的坑/","link":"","permalink":"http://yoursite.com/2018/05/11/安装mongodb遇到的坑/","excerpt":"","text":"mongodb是一个基于分布式文件存储的开源数据库系统，它主要为WEB应用提供可扩展的高性能数据存储解决方案。下面我说说具体的安装过程 我在官网上下载最新3.6版本并在windows下安装会出现进度条长时间不动的情况，这是因为3.6版本在windows下有不适配的问题，需要我们下载3.4版本安装 （我的安装路径是C:\\Program Files\\MongoDB） 下载安装完成之后，需要添加安装路径到path环境变量：C:\\Program Files\\MongoDB\\Server\\3.4\\bin 我们在D盘创建如下文件夹D:\\mongodb\\data D:\\mongodb\\logs 在命令提示符输入 cd C:\\Program Files\\MongoDB\\Server\\3.4\\bin 再输入mongod.exe –dbpath=D:\\mongodb\\data –logpath=D:\\mongodb\\logs\\mongodb.log –install 输入net start mongodb启动服务 最后在浏览器输入http://localhost:27017/在页面看到It looks like you are trying to access MongoDB over HTTP on the native driver port.表示成功 在这里我说一下我安装的时候遇到的几个坑 1.首先就是安装包问题，需要安装3.4版本的2.在输入net start mongodb之后，提示我服务没有响应控制功能，之后我发现在配置path路径时把C:\\windows\\system32给删掉了，把这句加上就可以了在D盘创建文件夹时，当时看别人的博客是把logs文件夹放到data文件夹里面，我这样操作之后启动服务是无法启动的，当我把logs文件夹和data文件夹并列之后，启动是可以的。","categories":[],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"}]},{"title":"使用express配置前端服务器","slug":"使用express配置前端服务器","date":"2018-05-05T13:39:41.000Z","updated":"2019-07-16T09:56:34.292Z","comments":true,"path":"2018/05/05/使用express配置前端服务器/","link":"","permalink":"http://yoursite.com/2018/05/05/使用express配置前端服务器/","excerpt":"","text":"使用webpack打包vue项目之后会生成dist文件夹，dist文件夹下面有html文件和其他的css,js和img等文件，如果你要查看打包之后的文件怎么办，这时候我们可以将生成的dist文件部署到express服务器上运行。 首先我们需要安装express-generator生成器 npm install express-generator -g 创建express项目 express expressname(项目名称) 进入项目目录，安装相关项目依赖 cd expressnamenpm install 将dist文件夹下生成的文件复制到express项目下的piblic文件夹下，然后运行npm start，启动express项目打开浏览器，输入localhost:3000查看效果","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"}]},{"title":"自适应布局的几种方法","slug":"自适应布局的几种方法","date":"2018-05-01T12:44:19.000Z","updated":"2019-07-16T09:56:47.570Z","comments":true,"path":"2018/05/01/自适应布局的几种方法/","link":"","permalink":"http://yoursite.com/2018/05/01/自适应布局的几种方法/","excerpt":"","text":"自适应布局的几种方法 百分比1&lt;meta name=&quot;viewport&quot; content=&quot;width-device-width,initial-scale=1&quot; viewport是网页默认的宽度和高度，width=device-width即网页宽度默认等于屏幕宽度，initial-scale=1即原始缩放比例为1.0，网页初始大小占屏幕面积的100%。 由于网页会根据屏幕宽度调整布局，所以不能使用绝对宽度的布局，也不能使用绝对宽度的元素，如css不能指定像素宽度，只能指定百分比宽度，字体不能使用绝对大小px，而只能使用相对大小em。 @media规则css3的@media规则可以在不改变html内容情况下，根据终端媒体设备的不同选择不同的css样式 具体写法： 123@media 设备类型 and (设备特性)&#123; css样式代码&#125; 例如： //浏览器窗口大于900px @media screen and(min-width:900px){ body{ font-size:25px; } } //浏览器窗口大于500px小于900px @media screen and(min-width:500px)and(max-width:900px){ body{ font-size:20px; } } //浏览器窗口小于500px @media screen and(max-width:500px){ body{ font-size:15px; } } rem自适应布局首先我们需要知道rem是相对于根元素的字体大小的单位，它是一个相对单位，同理em是相对于父元素的字体大小的单位；rem的计算规则依赖根元素，我们只需要在根元素确定一个px字号，就可以计算出元素的宽高。 target-densitydpi属性1&lt;meta name=&quot;viewport&quot; content=&quot;width=640,target-densitydpi=device-dpi,user-scalable=no&quot;&gt; 通过读取device-width的值来自动计算出target-densitydpi去实现自适应网页，不过缺点是目前只在android支持，具有兼容性问题。 target-densitydpi属性的取值范围： device-dpi --使用设备原本的dpi作为目标dpi，不会发生默认缩放。 high-dpi --使用hdpi作为目标dpi，中等像素密度和低像素密度设备相应缩小。 medium-dpi --使用mdpi作为目标dpi，高像素密度设备相应放大，低像素密度设备相应缩小，这是默认的target density low-dpi --使用ldpi作为目标dpi，中等像素密度和高像素密度设备相应放大 value --指定一个具体的dpi，值作为target dpi，这个值得范围必须在70-400之间。","categories":[],"tags":[{"name":"自适应布局","slug":"自适应布局","permalink":"http://yoursite.com/tags/自适应布局/"}]},{"title":"优雅降级与渐进增强","slug":"优雅降级与渐进增强","date":"2018-02-09T14:25:17.000Z","updated":"2019-07-16T09:56:44.308Z","comments":true,"path":"2018/02/09/优雅降级与渐进增强/","link":"","permalink":"http://yoursite.com/2018/02/09/优雅降级与渐进增强/","excerpt":"","text":"优雅降级与渐进增强 优雅降级(Graceful Degradation)：一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用CSS3的特性构建了一个应用，然后逐步针对各大浏览器进行测试使其可以再低版本浏览器上正常浏览。 渐进增强(Progressive Enhancement)：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。 渐进增强相当于向上兼容，而优雅降级相当于向下兼容，向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少，大多数软件都是向下兼容的 区别 优雅降级认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段 渐进增强则认为应关注于内容本身，而对浏览器则是次要的，因为内容是建立网站的诱因，这使得渐进增强成一种更为合理的设计范例。 例：123456789101112.transition&#123; /*渐进式写法*/ -webkit-transition:all .5s; -moz-transition:all .5s; -o-transition:all .5s; transition:all .5s;&#125;.transition&#123; /*优雅降级写法*/ transition:all .5s; -o-transition:all .5s; -moz-transition:all .5s; -webkit-transition:all .5s;&#125; 前缀CSS3与正常CSS3在浏览器中的支持情况： 很久以前：浏览器前缀CSS3和正常CSS3都不支持； 不久之前：浏览器只支持前缀CSS3，不支持正常CSS3； 现在：浏览器既支持前缀CSS3，又支持正常CSS3； 未来：浏览器不支持前缀CSS3，仅支持正常CSS3。","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"了解Vue-router","slug":"了解Vue-router","date":"2018-02-06T17:30:11.000Z","updated":"2019-07-16T09:56:27.070Z","comments":true,"path":"2018/02/07/了解Vue-router/","link":"","permalink":"http://yoursite.com/2018/02/07/了解Vue-router/","excerpt":"","text":"Vue-router通过Vue我们可以实现组件化开发，而各组件之间如何跳转呢，在我们第一次项目用gulp构建工具开发时，页面跳转是通过a标签的href属性实现的，不过在Vue中，页面跳转是通过路由实现的，路由的配置就成了一个需要学习的问题 路由实现页面跳转首先需要安装插件 npm install vue-router –save 之后在 main.js 里面写入 import VueRouter from ‘vue-router’ Vue.use(VueRouter) 通过它来引入 vue-router ，之后进入 /router/index.js 文件，同样先引入 import Router from ‘vue-router’ Vue.use(Router) 然后将你需要进行跳转的组件引入这个文件中，比如我现在要进行首页(index.vue)与商品列表(goodlist.vue)的跳转,首先我们需要将这两个页面引进来 import index from ‘@/components/index.vue’ import goodlist from ‘@/components/goodlist/goodlist.vue’ 然后进行页面的配置 12345678910111213141516export default new Router(&#123; routers: [ &#123; title: &apos;首页&apos;， path: &apos;/&apos;, name: &apos;index&apos;, components: index &#125;, &#123; title: &apos;商品目录&apos;, path: &apos;/goodlist&apos;, name: &apos;goodlist&apos;, components: goodlist &#125; ]&#125;) 然后在你的index.vue中商品元素的父元素中写入点击事件 &lt;span @click=”goodlist()”&gt;商品目录&lt;/span&gt; 然后在script中写入 1234567export default &#123; methods: &#123; goodlist: function () &#123; this.$router.push(&#123;path: &apos;/goodlist&apos;&#125;) &#125; &#125;&#125; 之后在页面点击首页的商品就可以跳转到商品列表页面","categories":[],"tags":[{"name":"vue-router","slug":"vue-router","permalink":"http://yoursite.com/tags/vue-router/"}]},{"title":"PWA了解【更新】","slug":"PWA了解","date":"2018-02-05T17:07:11.000Z","updated":"2019-07-16T09:57:02.054Z","comments":true,"path":"2018/02/06/PWA了解/","link":"","permalink":"http://yoursite.com/2018/02/06/PWA了解/","excerpt":"","text":"分享总结Progressive Web App这个词直译就是“进步的web app”，由于学长推荐的学习网页需要翻墙才能看，我在这里给大家推荐另一个网站 什么是PWA,希望能有所帮助 什么是PWA？PWA是一种提升Web App体验的方法，能带给用户原生应用般的体验，而PWA的主要特点主要包含以下几点： 渐进式 - 适用于选用任何浏览器的所有用户，因为它是以渐进式增强作为核心宗旨来开发的 自适应 - 适合任何机型：桌面设备、移动设备、平板电脑等 连接无关性 - 能够借助服务工作线程在离线或低质量网络状况下工作 类似应用 - 由于是在 App Shell模型 基础上开发，因此具有应用风格的交互和导航，给用户以应用般的熟悉感 持续更新 - 在服务工作线程更新进程的作用下时刻保持最新状态 安全 - 通过HTTPS提供，以防止窥探和确保内容不被篡改 可发现 - W3C清单和服务工作流程注册作用域能够让搜索引擎找到它们，从而将其识别为“应用” 可再互动 - 通过推送通知之类的功能简化了再互动 可安装 - 用户可免去使用应用商店的麻烦，直接将对其最有用的应用“保留”在主屏幕上 可链接 - 可通过网址轻松分享，无需复杂的安装 比如有一个具体的例子，天气PWA，当我们平时遇到断网时刷新一下页面，电脑或手机会出现“未连接到互联网”之类的页面或错误提示，而PWA则会在断网刷新后依然出现页面内容，而且当我们对页面上一个内容很感兴趣时，我们可以直接将它放在主页面，不需要安装app,国内的 豆瓣网手机版 使用的也是PWA，对于如何使用，由于在chrome浏览器需要下载“Web Server for Chrome”扩展功能，我们可以查按照我推荐的那个网站来进行操作 Service Worker前端工程师有很多性能优化手段，包括CDN、CSS Sprite、文件的合并压缩、异步加载、资源缓存等（原谅我还不清楚具体的性能优化），而Service Worker让缓存做到了优雅、极致，让Web App的缺点更加弱化。 Service Worker特点： 一个独立的worker线程，独立于当前网页进程，有自己独立的worker context 一旦被install，就永远存在，除非被uninstall 需要时可直接唤醒、不需要要=可以自动睡眠‘ 可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程渠取到（包括离线状态） 离线内容开发者可控 能向客户端推送消息 不能直接操作DOM 必须在HTTPS环境下工作 异步实现，内部大都是通过Promise实现 如何使用Service Worker请看网站资源，我试过，不用翻墙，可以成功检查到是否安装Seivice Worker","categories":[],"tags":[{"name":"pwa","slug":"pwa","permalink":"http://yoursite.com/tags/pwa/"}]},{"title":"Vue中外链css和js【不推荐引】","slug":"vue中如何引入外链css和js","date":"2018-01-30T19:10:29.000Z","updated":"2019-07-16T09:57:20.244Z","comments":true,"path":"2018/01/31/vue中如何引入外链css和js/","link":"","permalink":"http://yoursite.com/2018/01/31/vue中如何引入外链css和js/","excerpt":"","text":"初次使用vue，在这里我把我了解到的vue如何引入css和js方法给大家分享一下 引入外链css 大家的文件夹格式基本都是 这样的吧，在这里，我建议大家把css文件都放在static文件夹里面，可以直接放，也可以在里面新建文件夹放入，我也不知道为什么一定放在这里面，我放在比如assets里面死活就是不出来 放好之后，下面就可以直接在&lt;style&gt;里面引入格式如下： @import ‘./static/common.css’ 这是引入css 而对于js，我主要说一下如何引入jquery 首先我们输入命令行 npm install jquery –save 安装好之后，我们在’build/webpack.base.conf文件中引入jquery 123456789101112module.exports = &#123; ... resolve: &#123; extensions: [&apos;.js&apos;,&apos;.vue&apos;,&apos;.json&apos;], alias: &#123; &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;, &apos;@&apos;: resolve(&apos;src&apos;), &apos;jquery&apos;: path.resolve(__dirname, &apos;../node_modules/jquery/src/jquery&apos;) &#125; &#125;, ...&#125; 然后在你需要jquery的地方引入如下方法： import $ from ‘jquery’ 亲测是可以的","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"setTimeout与闭包","slug":"setTimeout与闭包","date":"2018-01-29T17:07:11.000Z","updated":"2019-07-16T09:57:05.913Z","comments":true,"path":"2018/01/30/setTimeout与闭包/","link":"","permalink":"http://yoursite.com/2018/01/30/setTimeout与闭包/","excerpt":"","text":"分享总结今天学姐给我们主要分享了关于setTimeout与闭包的问题，在这里我写一下自己的感受 在这之前，我个人认为首先需要了解一下javascript的单线程和异步。 作为一个脚本语言，javascript的主要用途是与用户互动，以及操作DOM，这决定了它只能是单线程，否则会带来很复杂的同步问题，所以也决定了它本身是不可能异步的。 但是，我们通过某种方式又可以使得js具备异步属性，当网络请求、定时器和事件监听时，如果同步执行的话，效率会非常低，所以这时浏览器会开辟另外的线程，主要包括http请求线程，浏览器定时触发器，浏览器事件触发进程，这些都是异步的。 那么问题来了，当异步任务都完成后，主线程又是如何知道的？答案是回调函数，整个程序是事件驱动的，每个事件都会绑定相应的回调函数，例如： 123setTimeout(function()&#123; console.log(time is out);&#125;,50); 当执行这段函数时，浏览器异步执行计时操作，当50ms时，会触发定时事件，这个时候就会把回调函数放到任务队列里 所以，js一直都是单线程的，浏览器实现异步 下面我们主要来回顾一下学姐今天给我们讲的知识： 1、setTimeout(f1,0) 这个语句中的f1数是立刻执行的吗？并不一定，我们首先要知道主线程内的命令是否执行完，如： 1234setTimeout(function()&#123; console.log(1);&#125;,0)console.log(2); 这段代码输出为2,1，因为执行setTimeout后，会立即把匿名函数放到任务队列里面等待主线程召唤，等到执行完console.log(2)之后，才会执行匿名函数，这里有人会问为什么要用setTimeout(f1,0)语句，首先我们要确认这个语句是具有意义的：如果f1很费时，那么我们需要先将它放到任务队列里面，等到主程序执行完之后再执行f1。 2、setTimeout中的闭包 12345for(var i = 0; i &lt; 5; i++)&#123; setTimeout(function()&#123; console.log(i); &#125;,1000*i);&#125; 结果：开始打印一个5，然后每隔一秒输出5，总共5个5 解析：先执行setTimeout外面的函数，然后执行setTimeout里面的函数，这时因为for循环已经遍历完，所以i=5，接着执行console.log(i),执行5次，所以输出5个5 那么如何得到0-4呢？ 1234567for(var i = 0;i &lt; 5; i++)&#123; (function(i)&#123; setTimeout(function()&#123; console.log(i); &#125;,i*1000); &#125;)(i);&#125; 结果：每隔一秒输出，输出0-4 解析：在这里我的理解是for循环遍历时，将每次i的值暂时存到(i)里面，然后当执行setTimeout时，通过function(i)将值引入进来，所以输出0-4 删掉i时 1234567for(var i = 0; i &lt; 5; i++)&#123; (function()&#123; setTimeout(function()&#123; console.log(i); &#125;,i*1000); &#125;)(i);&#125; 结果：5个5 解析：个人感觉这样写和第一个语句一样，是通过同样的方式输出。 变： 12345for(var i = 0; i &lt; 5; i++)&#123; setTimeout((function(i)&#123; console.log(i); &#125;)(i),i*1000);&#125; 结果：立刻输出0-4 解析：在这里我个人理解是先打印出0-4，但是先保存，最后一起输出 最后一个 12345678910111213setTimeout(function() &#123; console.log(1)&#125;, 0);new Promise(function executor(resolve) &#123; console.log(2); for( var i=0 ; i&lt;10000 ; i++ ) &#123; i == 9999 &amp;&amp; resolve(); &#125; console.log(3);&#125;).then(function() &#123; console.log(4);&#125;);console.log(5); 答案是2 3 5 4 1 对于第一个不输出1，我大概理解是它的执行时间是大于0小于1的，所以先执行下面的函数，最后执行setTimeout函数，所以最后打印1（看了mkicrotask和macrotask的区别后，我理解是console(1)会先存入macrotask中，当microtask任务执行完之后，最后执行macrotask任务） 对于es6中的promise方法，这是一种异步解决方法，它有三种状态：pending(进行中)、Resolved(已经完成)和Rejected(已失败)，上面代码里是resolve，是异步操作成功，因此打印出2 当i为9999且resolve()成立时，输出3 promise生成之后，用then方法分别指定Resolved状态和Reject状态的回调函数因此打印4，这块我认为4在5后面的原因是console.log(4)在函数内，执行时会先存入任务队列，然后promise优先级高于setTimeout，所以先输出5，然后是4，最后是1（不知道理解的对不对） 最后，学姐提到了macrotask与microtask,我查看了资料后，显示，它们两个相当于异步任务中不同的两个任务队列 而它们的不同如下： 123456789console.log(1);setTimeout(function()&#123; console.log(2);&#125;,0);Promise.resolve().then(function()&#123; console.log(3);&#125;).then(function()&#123; console.log(4);&#125;) 输出是1,3,4,2 由上代码我们就可以看出来（学姐的最后一个代码块也可以看出），Promise的异步任务优先级高于setTimeout的延时为0的任务 原因是Promise的then方法的函数会被存入microtasks队列，而setTimeout函数会被存入marcotasks中 在任务队列中，每一次事件循环，macrotask只会提取一个执行，而microtask会一直提取，直到microtask队列为空，也就是说如果某个microtask推入到执行中，那么当主线程任务完成之后，会循环调用该队列的下一个任务，直到全部完成，而事件循环每次只会引入一个macrotask，执行完之后主线程又会检查microtask队列，完成所有之后再执行macrotask任务","categories":[],"tags":[{"name":"异步","slug":"异步","permalink":"http://yoursite.com/tags/异步/"}]},{"title":"思考跨域问题","slug":"思考跨域问题","date":"2018-01-27T11:31:21.000Z","updated":"2019-07-16T09:56:37.917Z","comments":true,"path":"2018/01/27/思考跨域问题/","link":"","permalink":"http://yoursite.com/2018/01/27/思考跨域问题/","excerpt":"","text":"什么是跨域问题？跨域就是指浏览器不能执行其他网站的脚本，这是由浏览器的同源策略造成的，是javascript的安全限制 一个域名地址是由： http://(请求头) www(子域名) . cuijahuan(主域名) : 8080(端口号) / script/jquery.js(请求资源地址) 组成的 而同源，就是指域名，协议，端口均相同 当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域 而不同域之间的相互请求资源，就是跨域比如http://cuijiahuan.xyz 请求 http://jiahuan.xyz 解决方法1、使用ajax的JSONP 首先要了解JSONP只支持GET请求，不支持POST请求 ajax请求受同源策略影响，不允许进行跨域请求，而script标签src属性可以访问跨域的js脚本，因此，服务器不再返回JSON格式的数据，而是返回一段调用某个函数的JS代码，在src中进行了调用，实现了跨域。 还没有看jsonp，目前我只知道要在ajax里面引入 type:&quot;get&quot;, // 接收服务器数据的类型 dataType:&quot;jsonp&quot;, // 用于服务器端的获取函数的参数 jsonp:&quot;callback&quot;, // 函数名称 2、使用jquery的jsonp插件 首先我们要引入相关的js文件，相关下载可参考该地址 在我们前端代码中需要在ajax里的url下加入 callbackParameter:&quot;callback&quot; callback:&quot;callback_success&quot; 使用该方法不局限于get请求，还可以是post请求，但从服务器获取到的依然是jsonp格式 第三种方法是使用cors方法，具体可以参考网上其他博客 附：在项目中我解决跨域问题没有用到jsonp，是通过后台修改来实现的，在前端ajax里面需要加上一句语句 xhrFields: {withCredentials: true} 这句是提供了请求发送凭证的支持","categories":[],"tags":[{"name":"跨域","slug":"跨域","permalink":"http://yoursite.com/tags/跨域/"}]},{"title":"swiper初步应用","slug":"swiper初步应用","date":"2018-01-21T16:57:30.000Z","updated":"2019-07-16T09:57:09.312Z","comments":true,"path":"2018/01/22/swiper初步应用/","link":"","permalink":"http://yoursite.com/2018/01/22/swiper初步应用/","excerpt":"","text":"什么是swiper？swiper是一种用于移动端页面的前端特效插件，它是一种纯javascript的框架，主要用来做轮播图之类页面，在使用之前首先我们需要下载swiper 注：下载swiper-4.1.0.min.js和swiper-4.1.0.min.css即可 swiper使用方法1.首先加载插件1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; ... &lt;link rel=&quot;stylesheet&quot; href=&quot;path/to/swiper.min.css&quot;&gt;&lt;/head&gt;&lt;body&gt; ... &lt;script src=&quot;path/to/swiper.min.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2.HTML内容1234567891011121314151617&lt;div class=&quot;swiper-container&quot;&gt; &lt;div class=&quot;swiper-wrapper&quot;&gt; &lt;div class=&quot;swiper-slide&quot;&gt;Slide 1&lt;/div&gt; &lt;div class=&quot;swiper-slide&quot;&gt;Slide 2&lt;/div&gt; &lt;div class=&quot;swiper-slide&quot;&gt;Slide 3&lt;/div&gt; &lt;/div&gt; &lt;!-- 如果需要分页器 --&gt; &lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt; &lt;!-- 如果需要导航按钮 --&gt; &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt; &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt; &lt;!-- 如果需要滚动条 --&gt; &lt;div class=&quot;swiper-scrollbar&quot;&gt;&lt;/div&gt;&lt;/div&gt;导航等组件可以放在container之外 注：可以自行给swiper定义大小 3.初始化swiper1234567891011121314151617181920212223&lt;script&gt; var mySwiper = new Swiper (&apos;.swiper-container&apos;, &#123; direction: &apos;vertical&apos;, loop: true, // 如果需要分页器 pagination: &#123; el: &apos;.swiper-pagination&apos;, &#125;, // 如果需要前进后退按钮 navigation: &#123; nextEl: &apos;.swiper-button-next&apos;, prevEl: &apos;.swiper-button-prev&apos;, &#125;, // 如果需要滚动条 scrollbar: &#123; el: &apos;.swiper-scrollbar&apos;, &#125;, &#125;) &lt;/script&gt;&lt;/body&gt; 4.如何利用swiper实现一个简单的轮播图效果 默认前三项都成功完成 首先先上代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;swiper-4.1.0.min.css&quot;&gt; &lt;title&gt;轮播图&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .swiper-container &#123; width: 600px; height: 300px; &#125; .swiper-slide&#123; font-size: 50px; &#125; .swiper-slide:nth-of-type(1)&#123; background-color: cornflowerblue; &#125; .swiper-slide:nth-of-type(2)&#123; background-color: coral; &#125; .swiper-slide:nth-of-type(3)&#123; background-color: yellowgreen; &#125; .swiper-slide:nth-of-type(4)&#123; background-color: coral; &#125; .swiper-slide:nth-of-type(5)&#123; background-color: cornflowerblue; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;swiper-container&quot;&gt; &lt;div class=&quot;swiper-wrapper&quot;&gt; &lt;div class=&quot;swiper-slide&quot;&gt;Slide 1&lt;/div&gt; &lt;div class=&quot;swiper-slide&quot;&gt;Slide 2&lt;/div&gt; &lt;div class=&quot;swiper-slide&quot;&gt;Slide 3&lt;/div&gt; &lt;div class=&quot;swiper-slide&quot;&gt;Slide 4&lt;/div&gt; &lt;div class=&quot;swiper-slide&quot;&gt;Slide 5&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;swiper-4.1.0.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; var mySwiper = new Swiper (&apos;.swiper-container&apos;, &#123;// horizontal 水平 // vertical 垂直 direction: &apos;horizontal&apos;,// 开始显示第几张 initialSlide: 0,// 换页速度 speed: 1500,// 自动切换 autoplay: &#123; delay: 2000, &#125;, &#125;) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; initialSlide参数：设定初始化时slide页面的索引，初始时为0，即默认为轮播图第一张图；如果设置为2时，swiper初始化时页面就是轮播图第三张图 direction参数：设置轮播图的滑动方向，水平方向为（horizontal），垂直方向为（vertical），默认为水平方向 speed参数：轮播图的切换速度 autoplay参数：设置为true时自动切换图片，默认为false delay参数：自动切换的时间间隔，详情见上图代码 关于swiper的用法和初始化组件还有许多，具体请查看swiperAPI文档 分割线 在vue中我们可以直接下载插件实现swiper的功能 npm install vue-awesome-swiper 然后在main.js中引入 import VueAwesomeSwiper from ‘vue-awesome-swiper’Vue.use(VueAwesomeSwiper) 在对应的 .vue 比如(slide.vue)文件中，写入 12345678910111213141516171819202122232425262728293031323334353637383940template&gt; &lt;div id=&quot;slide&quot;&gt; &lt;swiper :options=&quot;swiperOption&quot; ref=&quot;mySwiper&quot;&gt; &lt;!-- 幻灯内容 --&gt; &lt;swiper-slide&gt;&lt;div class=&quot;fd_slide fd_slide1&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;1.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/swiper-slide&gt; &lt;swiper-slide&gt;&lt;div class=&quot;fd_slide fd_slide2&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;2.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/swiper-slide&gt; &lt;swiper-slide&gt;&lt;div class=&quot;fd_slide fd_slide3&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;3.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/swiper-slide&gt; &lt;swiper-slide&gt;&lt;div class=&quot;fd_slide fd_slide4&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;4.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/swiper-slide&gt; &lt;swiper-slide&gt;&lt;div class=&quot;fd_slide fd_slide5&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;5.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/swiper-slide&gt; &lt;/swiper&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; swiper, swiperSlide &#125; from &apos;vue-awesome-swiper&apos;import $ from &apos;jquery&apos;export default &#123; components: &#123; swiper, swiperSlide &#125;, data () &#123; return &#123; swiperOption: &#123; initialSlide: 0, direction: &apos;horizontal&apos;, loop: true, loopAdditionalSlides: 2, speed: 1000, autoplay: &#123; delay: 2000 &#125;, autoplayDisableOnInteraction: false, observer: true, observeParents: true &#125; &#125; &#125; &#125;&lt;/script&gt;","categories":[],"tags":[{"name":"swiper框架","slug":"swiper框架","permalink":"http://yoursite.com/tags/swiper框架/"}]},{"title":"webpack【更新】","slug":"webpack学习【持续更新】","date":"2018-01-08T02:14:35.000Z","updated":"2019-07-16T09:57:28.107Z","comments":true,"path":"2018/01/08/webpack学习【持续更新】/","link":"","permalink":"http://yoursite.com/2018/01/08/webpack学习【持续更新】/","excerpt":"","text":"什么是Webpack?Webpack是一个前端资源加载/打包工具，它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源. 通俗地讲，Webpack可以看作是模块打包机：它做的事情是，分析你的项目结构，找到Javascript模块以及其他的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。 Webpack与Gulp区别Webpack与之前学习的gulp相比较而言，两者的流程不大相同，而且Wwbpack的处理速度更快更直接，能打包更多不同类型的文件。 gulp是一种能够优化前端的开发流程的工具，它的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。 Webpack是一种模块化的解决方案，它的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的Javascript文件。 【注:loader用于对模块的源代码进行转换,比如Webpack只能处理js文件，因此对于css文件就需要安装对应loader模块：style-loader和css-loader等】 从图中可以看出，Webpack可以将多种静态资源js,css,less转换成一个静态文件。 使用Webpack安装Webpack在安装之前，需要检查本地环境是否支持node.js 使用npm安装Webpack 1npm install webpack -g 创建一个文件夹在你的电脑随便一个盘里创建一个新的文件夹或者使用命令创建: 1mkdir webpack-test 在文件夹中新建一个run1.js文件，代码如下： 1document.write(&quot;Hello World&quot;); 再添加index.html文件，代码如下： 12345678&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;bundle.js&quot;&gt; &lt;/body&gt;&lt;/html&gt; 接下来使用Webpack命令进行打包： 1webpack run1.js bundle.js 执行以上命令会编译run1.js文件并生成bundle.js文件 在浏览器中打开index.html文件，会看到页面上有“Hello World”。 Loader就像之前说的，如果想要处理除js之外的其他文件，对于css文件，首先需要执行命令来安装css-loader和style-loader 1npm install css-loader style-loader 接下来创建一个style.css文件，代码如下： 123body&#123; background:red;&#125; 修改run1.js文件： 12require(&quot;!style-loader!css-loader!./style.css&quot;);document.write(&quot;Hello World&quot;); 继续使用Webpack命令打包： 1webpack run1.js bundle.js 在浏览器访问index.html会发现背景变成红色。 配置文件可以将一些编译选项放在配置文件中，以便于统一管理。 创建webpack.config.js文件 123456789101112module.exports = &#123; entry: &quot;./run1.js&quot;, output: &#123; path: __dirname, filename: &quot;bundle.js&quot; &#125;, module: &#123; loaders: [ &#123;test: /\\.css$/,loader: &quot;style.loader!css-loader&quot;&#125; ] &#125;&#125;; 接下来只需要执行webpack命令即可生成bundle.js文件 Webpack命令执行后，会默认载入当前目录的webpack.config.js文件。 当你想要查看你添加的loaders模块时。可以在安装webpack之后再生成一个package.json文件,它里面会显示你当前所有的依赖模块，代码如下： 1npm init 默认一直点回车就行 开发环境如果不想每次修改模块之后还要重新编译，那么可以启用监听模式；开启之后，就不需要每次都重新编译，代码如下： 1webpack --watch 当然还有一种方法是启用一个本地服务器，来实现热加载，可以使用webpack-dev-server服务，当然首先需要安装： 1npm install webpack-dev-server -g 运行： 1webpack-dev-server 运行之后一般会通过localhost:8080启用一个express静态资源web服务器，并且会以监听模式自动运行webpack；如果该端口被占用，可以通过“ -port 端口号 ” 来改变服务器端口。 当然webpack还有其他功能。","categories":[],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/tags/webpack/"}]},{"title":"npm学习","slug":"npm学习","date":"2017-06-18T07:18:22.000Z","updated":"2019-07-16T09:56:58.712Z","comments":true,"path":"2017/06/18/npm学习/","link":"","permalink":"http://yoursite.com/2017/06/18/npm学习/","excerpt":"","text":"什么是npm？它有什么作用？ npm是和node.js一起的包管理工具，并且在安装node.js时已经安装好了npm,npm常见的使用场景有以下几个: 1231.允许用户从npm服务器下载别人编写的第三方包到本地使用。2.允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。3.允许用户将自己编写的包或命令行程序上传到npm服务器供别人使用。 安装npm npm本地安装的命令为: 1npm install npm 全局安装的命令为: 1npm install npm -g 如果要检查是否安装成功可以输入命令行: 1npm -v 来测试是否安装成功。 使用package.jsonpackage.json位于模块的目录下，用于定义包的属性。 在当前目录下产生package.json文件1npm init 安装当前package,json中定义的模块1npm install 注册与提交注册用户1234npm adduserUsername:输入用户名Password:输入密码Email:输入邮箱 编写完模块后输入命令行:1npm publish #发表模块 更新模块 尽管node.js自带pm，但是如果想要更新npm的话。可以输入命令: 1npm update npm -g 搜索模块1npm search &quot;Module Name&quot;","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"}]},{"title":"gulp学习","slug":"gulp学习","date":"2017-06-15T11:05:28.000Z","updated":"2019-07-16T09:56:55.692Z","comments":true,"path":"2017/06/15/gulp学习/","link":"","permalink":"http://yoursite.com/2017/06/15/gulp学习/","excerpt":"","text":"gulp作为前端开发过程中对代码进行构建的工具，对它进行了解学习是必要的，它可以提高我们的学习和工作效率 要使用gulp，首先要明白它是基于node.js下运行的，所以我们需要先安装node.js，安装完成后再安装gulp，这里分为全局安装gulp与本地安装gulp：对于全局安装，它的目的是为了通过它执行gulp任务;安装的命令提示符是： 1npm install gulp -g 安装好之后，可以使用 1gulp -v 来进行验证，如果出现版本号即为正确安装 而本地安装只需要将”-g”去掉 1npm install gulp 安装完成之后我们需要新建一个package,json文件 说明：package.json是基于node.js项目必不可少的配置文件，它是存放在项目根目录的json文件(在之后的gulpfile.js编写中也可以当做检查gulp插件是否调入的判断)安装的命令提示符 1npm init 这里需要说明一下package.json文件里的内容 123456789101.name:项目名称2.version:版本号3.description:项目描述4.homepage:项目网站5.author:作者姓名6.contributors:其他相关人姓名7.dependencies:包(插件)列表，默认在node_modules目录下8.repository:包(插件)存放地方的类型，可以是git或svn,git可在GitHub上9.main:main字段指定了程序的主入口文件，require(&apos;moduleName&apos;)就会加载这个文件。这个字段的默认值是模块根目录下面的index.js10.keywords:关键字 在gulp里面的主要知识点我个人认为是在于写gulpfile.js文件举例说明 123456var sass = require(&apos;gulp-sass&apos;); //将插件导入文件中并命名gulp.task(&apos;sass&apos;,function()&#123; //定义一个匿名函数return gulp.src(&apos;stylesheets/**/*.scss&apos;) .pipe(sass()) .pipe(gulp.dest(&apos;dist/css&apos;));&#125;); gulp.src() –找出需要处理的文件 .pipe() –指定需要执行的功能 gulp.desk() –将处理好的文件放到指定的位置 像例子中的sass就是一个插件，它的功能是将文件变为.css格式的文件,安装方式是 1npm install gulp-sass --save-dev 其他插件的安装方式与用法基本类似,不多描述 下面是我对gulp中的几个API的理解1.gulp.src()利用这个方法可以读取你需要的文件，语法为:1gulp.src(globs[,optios]) globs参数是文件匹配模式，用来匹配文件路径；当有多个模式时，该参数为一个数组；options为可选参数，通常用不到 2.gulp.dest()用来写文件，其语法为:1gulp.dest(path[,optios]) path为写入文件的路径；options为可选参数，通常用不到 3.gulp.task()用来定义任务，语法为:1gulp.task(name[,deps],fn) name为任务名；deps是当前定义的任务需要依赖其他任务；fn为任务函数，任务要执行的代码写在里面 4.gulp.watch()用来监视文件的变化，当文件发生变化后，可以利用它来执行相应的任务,语法为:1gulp.watch(glob[,opta],tasks) glob为要监视的文件匹配模式；opts为一个可选的配置对象，通常不用；tasks为文件变化后要执行的任务，为一个数组","categories":[],"tags":[{"name":"gulp","slug":"gulp","permalink":"http://yoursite.com/tags/gulp/"}]}]}